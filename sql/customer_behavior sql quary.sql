
CREATE TABLE Customer_behavior(
						Customer_ID INT,
						Purchase_Date DATE,
						Purchase_Time TIME,
						Product_Category VARCHAR(100),
						Product_Price INT,
						Quantity INT,
						Total_Purchase_Amount INT,
						Payment_Method VARCHAR(100),
						Customer_Age INT,
						Returns INT,
						Customer_Name VARCHAR(100),
						Age INT,
						Gender VARCHAR(100),
						Churn INT

);

SELECT *
FROM customer_behavior


--1. Customer Demographics
--What is the gender distribution of customers?

SELECT gender,
		count(customer_id)
FROM customer_behavior
GROUP BY 1;

--What is the age distribution? (min, max, average age)

SELECT min(age) AS min_age,
		Round(avg(age),2) AS avg_age,
		max(age) AS max_age
FROM customer_behavior;


--How many customers are there in each product catagory?

SELECT product_category,
		count(DISTINCT customer_id) AS total_customers
FROM customer_behavior
GROUP BY 1;

--Which payment method is most commonly used?

SELECT payment_method,
		count(*) AS total_used
FROM customer_behavior
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

--2. Churn Analysis
--What is the overall churn rate?

SELECT Round(count(*) FILTER(WHERE churn = 1) * 100/count(*)) AS churn_rate
FROM customer_behavior;

--What is the churn rate by gender and payment method?

SELECT gender,
		payment_method,
		Round(count(*) FILTER(WHERE churn = 1) * 100/count(*)) AS churn_rate
FROM customer_behavior
GROUP BY 1,2;

--Which age group or gender has the highest churn?

SELECT 
	case
		when age<20  then 'under 20'
		when age BETWEEN 20 and 29 THEN '20s'
		WHEN age BETWEEN 30 and 39 THEN '30s'
		WHEN age BETWEEN 40 and 49 THEN '40s'
		WHEN age BETWEEN 50 and 59 THEN '50s'
		ELSE '60s'
		END AS age_group,
		count(*) FILTER(WHERE churn = 1) as customer_churn,
		Round(count(*) FILTER(WHERE churn = 1) * 100/count(*)) AS churn_rate
FROM customer_behavior
Group BY 1;

--Do customers with high monthly charges churn more often?

SELECT TO_CHAR(purchase_date, 'YYYY-MM'), -- no, customar isnt carning with highly monthly charge
		total_purchase_amount,
		count(*) FILTER(WHERE churn = 1) as customer_churn
FROM customer_behavior
GROUP BY 1,2
ORDER BY 2 DESC;

--3. Revenue Insights
--What is the average monthly and total charge per customer?

SELECT customer_id,
		customer_name,
		count(*) as total_orders,
		sum(Total_Purchase_Amount) as total_spend,
		Round(avg(Total_Purchase_Amount)) as avg_perchase_per_order
FROM customer_behavior
GROUP BY 1,2;

--What is the total revenue generated by customers who didnâ€™t churn?

SELECT sum(total_purchase_amount) AS total_revenue
from customer_behavior
WHERE churn = 0;

--What is the revenue loss from churned customers?

SELECT 
    ROUND(SUM(Total_Purchase_Amount), 2) AS revenue_lost_from_churned_customers
FROM 
    customer_behavior
WHERE 
    Churn = 1;

--4. Customer Segmentation
--Can we create segments like:
--High-value loyal customers (High charges, no churn)?
--At-risk customers (High charges, churned)?
--Low-engagement customers (Low charges, minimal services)?

SELECT 
    customer_id,
    SUM(total_purchase_amount) AS total_spent,
    CASE
        WHEN SUM(total_purchase_amount) >= 1000 AND churn = 0 THEN 'high_value_customer'
        WHEN SUM(total_purchase_amount) >= 1000 AND churn = 1 THEN 'at_risk_customer'
        WHEN SUM(total_purchase_amount) < 1000 THEN 'low_engagement_customer'
    END AS customer_segment
FROM 
    customer_behavior
GROUP BY 
    customer_id, churn;


--Advanced/Pro-Level Questions
--Which group of customers should we target for retention campaigns?

SELECT customer_id,
		sum(total_purchase_amount) AS total_spent,
		count(*) AS total_orders,
		payment_method,
		max(purchase_date) AS last_purchase_date
FROM customer_behavior
WHERE churn = 1
GROUP BY 1,4
HAVING sum(total_purchase_amount) > 1000
ORDER BY 2 DESC;

--Which payment method is most prone to churn?

SELECT 
    Payment_Method,
    COUNT(*) AS total_customers,
    COUNT(*) FILTER (WHERE Churn = 1) AS churned_customers,
    ROUND(
        COUNT(*) FILTER (WHERE Churn = 1) * 100.0 / COUNT(*), 
        2
    ) AS churn_rate_percent
FROM 
    customer_behavior
GROUP BY 
    Payment_Method
ORDER BY 
    churn_rate_percent DESC;
	












